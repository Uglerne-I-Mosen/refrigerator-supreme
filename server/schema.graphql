type Category {
  id: ID
  name: String
  drinks: [Item]
}

type Item {
  id: ID
  name: String
  image: String
  price: Float
  energy: Float
  size: Float
  rating: Float
  ratings: [Rating]
  myRating: Rating
  category: Category
}

type LoginResponse {
  token: String
  user: User
}

type Mutation {
  CreateUser(email: String!, password: String!): LoginResponse
  Login(email: String!, password: String!): LoginResponse
  UpdateUser(password: String!): User
  CreateItem(
    name: String!
    image: String!
    price: Float!
    energy: Float!
    size: Float!
    categoryId: ID
  ): Item
  DeleteItem(id: ID!): Response
  UpdateItem(
    id: ID!
    name: String
    image: String
    price: Float
    energy: Float
    size: Float
    categoryId: ID
  ): Item
  RateItem(itemId: ID!, rating: Float!): Rating
  CreateCategory(name: String!): Category
  DeleteCategory(id: ID!): Response
  UpdateCategory(id: ID!, name: String!): Category
}

type Query {
  drinks(first: Int, after: Int): [Item]
  ratings(itemId: ID): [Rating]
  me: User
}

type Rating {
  id: ID
  item: Item
  user: User
  rating: Float
}

type Response {
  success: Boolean
}

type User {
  id: ID
  email: String
  ratings: [Rating]
}

